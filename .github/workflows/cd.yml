name: Java CD

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "main"]


jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant Execute Permission For Gradlew
        run: |
          cd kobaco
          cd kobaco
          chmod +x gradlew
      
      # 2. Spring Boot 애플리케이션 빌드
      - name: Build With Gradle
        run: |
          cd kobaco
          cd kobaco
          ./gradlew build
      
      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-kobaco ./kobaco/kobaco/
        
      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-kobaco


      - name: deploy script push
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.REMOTE_SSH_KEY }}
          source: "./.deploy/deploy.sh"
          target: "/home/ubuntu/deploy"
          strip_components: 2

      - name: execute remote ssh
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            rm ./.env
            touch .env
            echo "DB_URL=${{secrets.DB_URL}}" >> .env
            echo "DB_USERNAME=${{secrets.DB_USERNAME}}" >> .env
            echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env   
            echo "TOKEN_SECRET=${{secrets.TOKEN_SECRET}}" >> .env
            echo "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_KEY}}" >> .env
            echo "AWS_REGION=${{secrets.AWS_REGION}}" >> .env
            echo "AWS_S3_BUCKET=${{secrets.AWS_S3_BUCKET}}" >> .env
            
            chmod +x ./deploy/deploy.sh
            cd deploy && source deploy.sh